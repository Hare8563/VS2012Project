<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LabImg</name>
    </assembly>
    <members>
        <member name="T:LabImg.ChartUtility">
            <summary>
            チャート表示の関数クラス
            </summary>
        </member>
        <member name="M:LabImg.ChartUtility.PlotChartXY(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            XY-plotの散布図で点集合を表示
            </summary>
            <param name="chart"></param>
            <param name="plot1"></param>
            <param name="plot2"></param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:LabImg.ChartUtility.PlotChartXY(System.Windows.Forms.DataVisualization.Charting.Chart,ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            散布図表示
            </summary>
            <param name="chart"></param>
            <param name="plot1"></param>
            <param name="plot2"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:LabImg.ChartUtility.PlotChartXY(System.Windows.Forms.DataVisualization.Charting.Chart,OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            散布図表示
            </summary>
            <param name="chart"></param>
            <param name="plot1"></param>
            <param name="plot2"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:LabImg.ChartUtility.PlotChartXY(System.Windows.Forms.DataVisualization.Charting.Chart,System.Single[0:,0:],System.Single[0:,0:],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            散布図表示
            </summary>
            <param name="chart"></param>
            <param name="plot1"></param>
            <param name="plot2"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:LabImg.ChartUtility.PlotChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.Single[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            折れ線をプロット
            </summary>
            <param name="chart"></param>
            <param name="plot1"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:LabImg.ChartUtility.PlotChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.Single[],System.Single[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            二本の折れ線をプロット
            </summary>
            <param name="chart"></param>
            <param name="plot1"></param>
            <param name="plot2"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:LabImg.ChartUtility.PlotChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.Single,System.Single,System.Single,System.Single,System.Object[])">
            <summary>
            三本以上の折れ線をプロット
            </summary>
            <param name="chart"></param>
            <param name="minX">x軸の最小値</param>
            <param name="maxX">x軸の最大値</param>
            <param name="minY">y軸の最小値</param>
            <param name="minY">y軸の最大値</param>
            <param name="plots">3つ以上のfloat配列をobjectにキャストして渡す</param>
        </member>
        <member name="T:LabImg.Collision">
            <summary>
            衝突判定クラス
            </summary>
        </member>
        <member name="M:LabImg.Collision.JudgeInfinitePlane(LabImg.PVector,LabImg.PVector,LabImg.Triangle)">
            <summary>
            <para>無限平面と線分p1p2の衝突判定</para>
            </summary>
            <param name="p1">座標 1</param>
            <param name="p2">座標 2</param>
            <param name="t">三角形(無限平面)</param>
            <returns>交差した時はTrue</returns>
        </member>
        <member name="M:LabImg.Collision.LineToLine(LabImg.PVector,LabImg.PVector,LabImg.PVector,LabImg.PVector)">
            <summary>
            <para>線分同士の交差判定</para>
            <para>例外時の検証が必要</para>
            </summary>
            <param name="start0">線分の始点</param>
            <param name="end0">線分の終点</param>
            <param name="start1">対象の線分の始点</param>
            <param name="end1">対象の線分の終点</param>
            <returns>交差した時はTrue</returns>
        </member>
        <member name="M:LabImg.Collision.LineToLine(LabImg.PVector,LabImg.PVector,LabImg.PVector,LabImg.PVector,LabImg.PVector@)">
            <summary>
            <para>線分同士の交差判定</para>
            <para>例外時の検証が必要</para>
            </summary>
            <param name="start0">線分の始点</param>
            <param name="end0">線分の終点</param>
            <param name="start1">対象の線分の始点</param>
            <param name="end1">対象の線分の終点</param>
            <param name="collisionPoint">交差した点。交差しないときはNUllが入る</param>
            <returns>交差した時はTrue</returns>
        </member>
        <member name="M:LabImg.Collision.TomasMoller(LabImg.PVector,LabImg.PVector,LabImg.Triangle)">
            <summary>
            <para>TomasMollerの衝突判定</para>
            </summary>
            <param name="eyePoint">視点の座標</param>
            <param name="point">対象の座標</param>
            <param name="triagnle">衝突判定対象の三角形</param>
            <returns>交差した時はTrue</returns>
        </member>
        <member name="M:LabImg.Collision.TomasMoller(LabImg.PVector,LabImg.PVector,LabImg.Triangle,LabImg.PVector@)">
            <summary>
            <para>TomasMollerの衝突判定</para>
            </summary>
            <param name="eyePoint">視点の座標</param>
            <param name="point">対象の座標</param>
            <param name="triagnle">衝突判定対象の三角形</param>
            <param name="collisionPoint">交差点を返す。交差しない場合はNULLが入る</param>
            <returns>交差した時はTrue</returns>
        </member>
        <member name="T:LabImg.CommonUtility">
            <summary>
            よく使う関数群をまとめたクラス
            </summary>
        </member>
        <member name="M:LabImg.CommonUtility.pocDisplacement(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Single,System.Int32,System.Single@,System.Single@)">
            <summary>
            位相限定相関によるシフト量推定
            </summary>
            <param name="RSimg"></param>
            <param name="LSimg"></param>
            <param name="fitRange">-fitRange～＋fitRangeのデータを使ってピークを内挿</param>
            <param name="fitOpt">fitOpt=0.0で二次関数Fitting、=1.0でSinc関数Fitting</param>
            <param name="filterOpt">2以下ではフィルターをかけない。周波数が0-nfft/2の範囲で指定（４－８程度を指定）</param>
            <param name="sftX"></param>
            <param name="sftY"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.CommonUtility.blockmatchDisplacement(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single@,System.Single@)">
            <summary>
            Rimgを基準にターゲットが,Limgで、（sftX、sftY）ピクセル移動している
            </summary>
            <param name="Rimg">右画像の選択ブロック</param>
            <param name="Limg">左画像の選択ブロック</param>
            <param name="mindx">探索範囲（X）</param>
            <param name="maxdx">探索範囲</param>
            <param name="mindy">探索範囲（Y）</param>
            <param name="maxdy">探索範囲</param>
            <param name="fitRange">fitRange=0でfitなし、その他は、-fitrange..fitRangeでの二次関数補間</param>
            <param name="fitOpt">fitOpt=0.0で二次関数fit、=1.0でSinc関数Fit</param>
            <param name="sftX">出力（X方向シフト）</param>
            <param name="sftY">出力（Y方向シフト）</param>
        </member>
        <member name="M:LabImg.CommonUtility.getRectCenter(OpenCvSharp.IplImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            矩形領域を抽出する。左上と右下座標を指定。IplImageは、Byte単位のRGBかGray
            </summary>
            <param name="img"></param>
            <param name="xc"></param>
            <param name="yc"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.CommonUtility.lpfImage(OpenCvSharp.IplImage,System.Int32,System.Int32)">
            <summary>
            複素フーリエ変換の結果のLowPassFilter
            </summary>
            <param name="fimgOrg">2chのIplImage</param>
            <param name="fhx">Width以内の整数</param>
            <param name="fhy">Height以内の整数</param>
            <returns>IplImage</returns>
        </member>
        <member name="M:LabImg.CommonUtility.bpfImage(OpenCvSharp.IplImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            周波数領域でのバンドパスフィルタリング
            </summary>
            <param name="imgOrg">複素領域の画像FFT結果</param>
            <param name="flx"></param>
            <param name="fhx"></param>
            <param name="fly"></param>
            <param name="fhy"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.CommonUtility.hanningWindow(System.Int32,System.Int32)">
            <summary>
            ハニングウィンドう（２乗）
            </summary>
            <param name="wd"></param>
            <param name="ht"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.CommonUtility.hanningWindowMultiple(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            画像にハニングウィンドウをかける
            </summary>
            <param name="Img"></param>
            <param name="hwin"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.CommonUtility.maxIplImage(OpenCvSharp.IplImage,System.Single@,System.Int32@,System.Int32@)">
            <summary>
            IplImage.Val0　の最大値とその場所を求める
            </summary>
            <param name="I"></param>
            <param name="fmax"></param>
            <param name="xi"></param>
            <param name="yi"></param>
        </member>
        <member name="M:LabImg.CommonUtility.minIplImage(OpenCvSharp.IplImage,System.Single@,System.Int32@,System.Int32@)">
            <summary>
            IplImage.Val0　の最小値とその場所を求める
            </summary>
            <param name="I"></param>
            <param name="fmin"></param>
            <param name="xi"></param>
            <param name="yi"></param>
        </member>
        <member name="M:LabImg.CommonUtility.delayFit(System.Single[],System.Int32,System.Single)">
            <summary>
            配列r(0..mmm-1)の最大値を探して、Sinc関数または二次関数で最大位置を求める。
            </summary>
            <param name="r">mmmの配列r(0..mmm-1)</param>
            <param name="d">Peak-d～Peak+dの2d+1点でFitting</param>
            <param name="VN">VN=0.0で二次関数Fitting、=1.0でSinc関数Fitting</param>
            <returns>戻り値は、始点からの距離（始点＝０で一点のズレ＝１．０）</returns>
        </member>
        <member name="M:LabImg.CommonUtility.ToRoundDown(System.Double,System.Int32)">
            <summary>
                指定した精度の数値に切り捨てします。</summary>
            <param name="dValue">
                丸め対象の倍精度浮動小数点数。</param>
            <param name="iDigits">
                戻り値の有効桁数の精度。</param>
            <returns>
                iDigits に等しい精度の数値に切り捨てられた数値。</returns>
        </member>
        <member name="M:LabImg.CommonUtility.FillPicBox(System.Drawing.Bitmap,System.Windows.Forms.PictureBox)">
            <summary>
            BitmapをPictureBox内に収める関数
            </summary>
            <param name="src">bitmap</param>
            <param name="renderBox">描写するPictureBox</param>
        </member>
        <member name="M:LabImg.CommonUtility.GetDist(LabImg.PVector,LabImg.PVector)">
            <summary>
            2点間の距離を求める
            </summary>
            <param name="p1">座標　1</param>
            <param name="p2">座標　2</param>
            <returns>2点間の距離</returns>
        </member>
        <member name="M:LabImg.CommonUtility.medianFilter(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Int32)">
            <summary>
            未完成の２次元メディアンフィルタ
            </summary>
            <param name="Din"></param>
            <param name="Dout"></param>
            <param name="M"></param>
        </member>
        <member name="M:LabImg.CommonUtility.meanFilter(ShoNS.Array.DoubleArray,ShoNS.Array.DoubleArray,System.Int32)">
            <summary>
            未完成
            </summary>
            <param name="Din"></param>
            <param name="Dout"></param>
            <param name="M"></param>
        </member>
        <member name="M:LabImg.CommonUtility.PolygonArea(ShoNS.Array.DoubleArray)">
            <summary>
            多角形の面積計算
            </summary>
            <param name="S">s(i,j)：i=1-3；３次元空間の座標、j=0-np-1　頂点の数</param>
            <returns>戻り値は面積</returns>
        </member>
        <member name="M:LabImg.CommonUtility.median(System.Single[])">
            <summary>
            一次元配列の中央値の計算
            </summary>
            <param name="data">一次元配列</param>
            <returns>戻り値は中央値</returns>
        </member>
        <member name="M:LabImg.CommonUtility.mode(System.Single[])">
            <summary>
            一次元配列の最頻値の計算
            </summary>
            <param name="data">一次元配列</param>
            <returns>戻り値は最頻値</returns>
        </member>
        <member name="M:LabImg.CommonUtility.average(System.Single[])">
            <summary>
            一次元配列の平均値の計算
            </summary>
            <param name="data">一次元配列</param>
            <returns>戻り値は平均値</returns>
        </member>
        <member name="T:LabImg.Delaunay">
            <summary>
            <para>ドロネー三角分割を求めるクラス </para>
            <para>大量の点群を引数にとるとコンストラクタの時点で処理に時間がかかります</para>
            </summary>
        </member>
        <member name="M:LabImg.Delaunay.#ctor(System.Collections.Generic.List{LabImg.PVector})">
            <summary>
            <para>コンストラクタ</para>
            <para>(外接円上に4点以上あるとドロネー三角の劣化が起こるので点の配置は調整してください）</para>
            <para>乱数を点に加算減算して位置の調整する等</para>
            </summary>
            <param name="pVectorList">点のリスト</param>
        </member>
        <member name="M:LabImg.Delaunay.FilterOutSidePoint(System.Collections.Generic.List{LabImg.Triangle})">
            <summary>
            <para>同一の三角形を除去する</para>
            <para>内部の三角形を排除することができる</para>
            </summary>
            <returns>外側の三角形リスト</returns>
        </member>
        <member name="M:LabImg.Delaunay.TetraToTriangle(System.Collections.Generic.List{LabImg.Tetrahedron})">
            <summary>
            三角錐のリストから外側の三角形のデータだけのリストを返す
            </summary>
            <returns>三角形のリスト</returns>
        </member>
        <member name="M:LabImg.Delaunay.GetTetraList(System.Collections.Generic.List{LabImg.PVector})">
            <summary>
            ドロネー三角を計算して、作成した三角錐のリストを返す
            </summary>
            <param name="pVectorList">全点のリスト</param>
            <returns>三角錐リスト</returns>
        </member>
        <member name="M:LabImg.Delaunay.GetFirstTetra(System.Collections.Generic.List{LabImg.PVector})">
            <summary>
            全てを内包する三角錐の座標を求める
            </summary>
            <param name="pVectorList">ポイントのXYZのリスト</param>
            <returns>内包する三角錐</returns>
        </member>
        <member name="P:LabImg.Delaunay.FirstTetra">
            <summary>
            全点を内包する三角錐の座標データ
            </summary>
        </member>
        <member name="P:LabImg.Delaunay.TetraList">
            <summary>
            ドロネー三角分割で生成された三角錐リスト
            </summary>
        </member>
        <member name="P:LabImg.Delaunay.AllTriangleList">
            <summary>
            三角錐リストから作成された全ての三角形リスト
            </summary>
        </member>
        <member name="P:LabImg.Delaunay.OutsideTriangleList">
            <summary>
            三角錐リストから作成された外側の三角形リスト
            </summary>
        </member>
        <member name="T:LabImg.Disparity">
            <summary>
            視差を求めるクラス
            </summary>
        </member>
        <member name="M:LabImg.Disparity.twoDCDP(System.Byte*,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32,System.Int32*,System.Int32*)">
            <summary>
            CDPの呼び出し
            </summary>
            <param name="inImgData">入力画像のImageDataのポインタ</param>
            <param name="inImgHeight">入力画像の高さ</param>
            <param name="inImgWidth">入力画像の幅</param>
            <param name="inImgWidthStep">入力画像のWidthStep</param>
            <param name="refImgData">参照画像のImageDataのポインタ</param>
            <param name="refImgHeight">参照画像の高さ</param>
            <param name="refImgWidth">参照画像の幅</param>
            <param name="refImgWidthStep">参照画像のWidthStep</param>
            <param name="disparityX">X方向の視差配列の先頭アドレス（出力用)</param>
            <param name="disparityY">Y方向の視差配列の先頭アドレス(出力用)</param>
        </member>
        <member name="M:LabImg.Disparity.ymlRead(System.String,System.Single)">
            <summary>
            カメラパラメータファイルの読み込み
            </summary>
            <param name="fname"></param>
             <param name="size"></param>
            <returns>CvMat　Q(4,4) F32C1</returns>
        </member>
        <member name="M:LabImg.Disparity.DisparityToDistance(OpenCvSharp.CvMat,System.Single,System.Int32,System.Int32)">
            <summary>
            Disparity、画像座標（ｘ、ｙ）をQ(4,4)を用いて、カメラ座標（X、Y、Z）に変換する
            </summary>
            <param name="Q"></param>
            <param name="disparity"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <returns>CvMat　cameraXYZ(3,1)　F32C1</returns>
        </member>
        <member name="M:LabImg.Disparity.DisparityToDistance(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Disparity、画像座標（ｘ、ｙ）をQ(4,4)を用いて、カメラ座標（X、Y、Z）に変換する
            </summary>
            <param name="focus">Q(3,4):focus</param>
            <param name="scale">Q(4,3):Scale</param>
            <param name="width">Width:Scale</param>
            <param name="height">Height:Scale</param>
            <param name="disparity"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <returns>F32C1のCvMat(3,1)：X,Y,Zのカメラ座標値</returns>
        </member>
        <member name="M:LabImg.Disparity.CameraToWorldXYZ(OpenCvSharp.CvMat,System.Single,System.Single,System.Single,OpenCvSharp.CvMat)">
            <summary>
            カメラ座標を世界座標に変換
            </summary>
            <param name="cameraXYZ"></param>
            <param name="rz"></param>
            <param name="ry"></param>
            <param name="rnz"></param>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.imageCurvature(OpenCvSharp.IplImage,System.Int32)">
             <summary>
            グレイ画像の曲率を求める
            opt==0,平均曲率(mean curvature) 
            opt==1,ガウス曲率（Gaussian Curvature)
            opt==2,Kitchen-Rosenfeld operator
            opt==3,Zuniga-Haralick operator
            opt==4,Harris operator
            opt==5,MORAVEC-SUZAN (threはSUZAN作用素で用いる）
            opt==6,rerative SIFT operator 
             </summary>
             <param name="img"></param>
             <param name="opt"></param>
             <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.imageGradient(OpenCvSharp.IplImage,System.Int32)">
            <summary>
            一階微分画像を作成（入力は、グレースケール) 
            </summary>
            <param name="img"></param>
            <param name="opt">opt=0 GX,GY,opt=1　Gain,Phase</param>
            <returns>>X方向微分、Y方向微分、振幅、位相（度）を４ｃｈCvMatで戻す</returns>
        </member>
        <member name="M:LabImg.Disparity.imageGradient(OpenCvSharp.IplImage,OpenCvSharp.CvMat@,OpenCvSharp.CvMat@,OpenCvSharp.CvMat@,OpenCvSharp.CvMat@)">
            <summary>
            一階微分画像を作成（入力は、グレースケール)
            </summary>
            <param name="img"></param>
            <param name="GX">X方向微分</param>
            <param name="GY">Y方向微分</param>
            <param name="GN">振幅</param>
            <param name="PH">位相（摂</param>
        </member>
        <member name="M:LabImg.Disparity.imageGradient2(OpenCvSharp.IplImage)">
            <summary>
            二階微分の計算（入力は、グレースケール) 
            </summary>
            <param name="img"></param>
            <returns>>gxx,gyy,gxyを３ｃｈのCvMatで戻す</returns>
        </member>
        <member name="M:LabImg.Disparity.imageLanlacian(OpenCvSharp.IplImage)">
            <summary>
            二階微分画像のラプラシアンを作成（入力は、グレースケール) 
            </summary>
            <param name="img"></param>
            <returns>>ラプラシアンを一ｃｈCvMatで戻す</returns>
        </member>
        <member name="M:LabImg.Disparity.CvMatExtraction(OpenCvSharp.CvMat,System.Int32)">
            <summary>
            ４CｈのCvMatから、exNoで指定したデータを取り出し、１ｃｈのCvMatで戻す
            </summary>
            <param name="G"></param>
            <param name="exNo">０、１，２，３で指定</param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.BlockMatchTexture(OpenCvSharp.IplImage,System.Int32,System.Char)">
            <summary>
            画像のブロックごとの分散または振幅を求める
            </summary>
            <param name="rightI"></param>
            <param name="halfBlockSize"></param>
            <param name="VorPP">’P’で振幅、それ以外は標準偏差</param>
            <returns>FloatArrayを返す</returns>
        </member>
        <member name="M:LabImg.Disparity.HorizontalBlockMatch(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
            右画像の(TopLeftX,TopLeftY）座標を起点に、水平方向にdisparityRange個だけブロックマッチを行う。DisparityCostの分布を見る際に用いる
            入力画像をGrayでもRGBでも良いように改造。ただし、IplImageはU8(バイト）型でないといけない。
             </summary>
             <param name="Left"></param>
             <param name="Right"></param>
             <param name="halfBlockSize"></param>
             <param name="disparityRange"></param>
             <param name="TopLeftX"></param>
             <param name="TopLeftY"></param>
             <returns>disparityCost[]の一次元配列を戻り値として返す</returns>
        </member>
        <member name="M:LabImg.Disparity.KanemotoBlockMatch(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="leftPath"></param>
            <param name="rightPath"></param>
            <param name="halfBlockSize"></param>
            <param name="disparityRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.KanemotoBlockMatch(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Int32)">
            <summary>
            MATLABのBlockマッチング,入力画像は、GrayかRGBで、U8(バイト）型
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <param name="halfBlockSize"></param>
            <param name="disparityRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.KanemotoBlockMatch(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            制約付きBlockMatch(Stencil）
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <param name="halfBlockSize"></param>
            <param name="stencil"></param>
            <param name="srcRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.KanemotoDPmatch(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="leftPath"></param>
            <param name="rightPath"></param>
            <param name="halfBlockSize"></param>
            <param name="disparityRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.KanemotoDPmatch(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Int32)">
            <summary>
            MATLABのDPマッチング,入力画像はGrayでもRGBでもよい。
            </summary>
            <param name="leftI"></param>
            <param name="rightI"></param>
            <param name="halfBlockSize"></param>
            <param name="disparityRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.BlockMatch(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            OpenCV版ブロックマッチ、、戻り値はU8,1ch
            視差は16倍されている（距離変換後16倍する必要がある)
            </summary>
            <param name="leftPath"></param>
            <param name="rightPath"></param>
            <param name="bmsize"></param>
            <param name="srcRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.BlockMatch(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Int32)">
             <summary>
             OpenCV版ブロックマッチ、戻り値はU8,1ch
             視差は16倍されている（距離変換後16倍する必要がある)
             </summary>
             <param name="grayLeft"></param>
             <param name="grayRight"></param>
             <param name="bmsize">ブロックマッチングサイズ（2*bmsiz+1が実際のサイズ）</param>
             <param name="srcRange">探索範囲の最大値（零から最大値までを探索）</param>
             <returns></returns>
             
            
        </member>
        <member name="M:LabImg.Disparity.DPMatch(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            OpenCVのDPマッチング関数、戻り値はU8,1ch
            視差は16倍されている（距離変換後16倍する必要がある)
            </summary>
            <param name="leftFilePath"></param>
            <param name="rightFlePath"></param>
            <param name="bmsize"></param>
            <param name="srcRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.GraphCut(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            OpenCV GraphCut、戻り値はU8,1ch
             視差は16倍されている（距離変換後16倍する必要がある)
            </summary>
            <param name="leftPath"></param>
            <param name="rightPath"></param>
            <param name="bmsize"></param>
            <param name="searchRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.GraphCut(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Int32)">
            <summary>
            OpenCV GraphCut、戻り値はU8,1ch
             視差は16倍されている（距離変換後16倍する必要がある)
            </summary>
            <param name="grayLeft"></param>
            <param name="grayRight"></param>
            <param name="bmsize"></param>
            <param name="searchRange"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Disparity.DisparityToDepthMap(OpenCvSharp.IplImage,System.String)">
            <summary>
            Disparity画像からDepthMap画像を生成する
            </summary>
            <param name="img">Disparity画像</param>
            <param name="ymlPath">ymlファイルのパス</param>
            <returns>Depth情報を格納したIplImage</returns>
        </member>
        <member name="M:LabImg.Disparity.DisparityToDepthMap(OpenCvSharp.IplImage,System.String,System.Single,System.Single)">
             <summary>
             Disparity画像からDepthMap画像を生成する.
             </summary>
             <param name="img">Disparity画像</param>
             <param name="ymlPath">ymlファイルのパス</param>
            <param name="minDepth">最小値の制限</param>
            <param name="maxDepth">最大値の制限</param>
             <returns>Depth情報を格納したIplImage</returns>
        </member>
        <member name="M:LabImg.Disparity.normalizeIplDepth(OpenCvSharp.IplImage,System.Int32,System.Int32)">
            <summary>
            デプスマップ画像をノーマライズして返す。表示用
            </summary>
            <param name="depth">デプスマップ画像</param>
            <param name="cMin" >コントラストの下限幅</param>
            <param name="cMax">コントラストの上限幅</param>
            <returns>cMin, cMaxでコントラスト調整された画像を返す</returns>
        </member>
        <member name="M:LabImg.Disparity.AdjustContrast(System.Single,System.Int32)">
            <summary>
            ピクセルのコントラストを調整する
            </summary>
            <param name="pixel">float型の画素値</param>
            <param name="d">切り捨て部分,0~255まで</param>
            <returns>コントラスト調整された画素値</returns>
        </member>
        <member name="M:LabImg.Disparity.AdjustContrast(System.Single,System.Int32,System.Int32)">
            <summary>
            コントラストを上限、下限を指定して調整する。
            </summary>
            <param name="pixel"></param>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="T:LabImg.GammaSpline">
            <summary>
            スプライン補間関連クラス
            </summary>
        </member>
        <member name="M:LabImg.GammaSpline.PointCloudDataRead(System.String)">
            <summary>
            ptsファイルからfloat[240,320]データを返す
            </summary>
            <param name="pointCloudPath">ptsファイルパス</param>
            <returns>float[240,320]の距離データ</returns>
        </member>
        <member name="M:LabImg.GammaSpline.GammaDataRead(System.String,System.String)">
            <summary>
            ガンマデータと感度データを補正したものを返す
            </summary>
            <param name="gammaLogFilePath">ガンマデータのファイルパス</param>
            <param name="senFilePath">感度データのファイルパス</param>
            <returns>float[8,16]のデータ</returns>
        </member>
        <member name="M:LabImg.GammaSpline.ReadGamma(System.String)">
            <summary>
            東芝のデータを読み込んで2次元配列を返す(配列は[y,x]の順)
            </summary>
            <param name="path">東芝のデータ(.csv)</param>
            <returns>[8,16]の配列</returns>
        </member>
        <member name="M:LabImg.GammaSpline.GammaSimpleInterp(System.Single[0:,0:])">
            <summary>
            東芝のデータを[16,16]に内挿する
            </summary>
            <param name="rawData">東芝のデータ[8,16]</param>
            <returns>[16,16]の配列</returns>
        </member>
        <member name="M:LabImg.GammaSpline.GammaSplineInterp(System.Single[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            スプライン補間
            </summary>
            <param name="rawData">東芝のデータ</param>
            <param name="ny">縦方向の分割区分数</param>
            <param name="nx">横方向の分割区分数</param>
            <param name="degree">補間に利用する次数</param>
            <returns>[320,320]の配列データ(初期値はfloat.MinValue)</returns>
        </member>
        <member name="M:LabImg.GammaSpline.GammaAreaCal(System.Single[0:,0:])">
            <summary>
            スプライン補間したデータの面積を求める
            </summary>
            <param name="splineArray">スプライン補間された配列[320,320]</param>
            <returns>面積の配列[8,16]</returns>
        </member>
        <member name="M:LabImg.GammaSpline.GammaBmpConv(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            配列[N,M]からBitmap[mny,mnx]を作成する
            </summary>
            <param name="mapData"></param>
            <param name="mny"></param>
            <param name="mnx"></param>
            <returns>ColorMap(初期値float.MinValueの時はBlack)</returns>
        </member>
        <member name="M:LabImg.GammaSpline.GammaConv(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            mapData[N,M]から、mny x mnxの配列を作成する
            </summary>
            <param name="mapData"></param>
            <param name="mny"></param>
            <param name="mnx"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.GammaSpline.splineAreaFit(System.Single[0:,0:],System.Int32,System.Single)">
            <summary>
            面積調整のための収束計算、rawData[8,16]計測値を入れ、面積が同じになるスプライン補間データspData[320,320]を返す
            </summary>
            <param name="rawData"></param>
            <param name="maxIteration">最大繰り返し数５０が標準</param>
            <param name="thre">収束判定閾値０．０１くらいがよい</param>
            <returns></returns>
        </member>
        <member name="T:LabImg.BSplineCurve">
            <summary>
            曲面を求めるクラス
            </summary>
        </member>
        <member name="F:LabImg.BSplineCurve._s">
            <summary>
            S曲線のデータ
            </summary>
        </member>
        <member name="F:LabImg.BSplineCurve._t">
            <summary>
            t曲線のデータ
            </summary>
        </member>
        <member name="F:LabImg.BSplineCurve._allPointNum">
            <summary>
            データの総数
            </summary>
        </member>
        <member name="F:LabImg.BSplineCurve._xArray">
            <summary>
            各座標ごとの配列
            </summary>
        </member>
        <member name="F:LabImg.BSplineCurve._yArray">
            <summary>
            各座標ごとの配列
            </summary>
        </member>
        <member name="F:LabImg.BSplineCurve._zArray">
            <summary>
            各座標ごとの配列
            </summary>
        </member>
        <member name="F:LabImg.BSplineCurve.Pos2">
            <summary>
            st上のXYZデータ
            </summary>
        </member>
        <member name="M:LabImg.BSplineCurve.#ctor(LabImg.CurveData,LabImg.CurveData,System.Collections.Generic.List{LabImg.XYZ})">
            <summary>
            BSpline定義
            曲面についてのみ実装
            </summary>
            <param name="s">縦軸データ</param>
            <param name="t">横軸データ</param>
            <param name="xyzList">x,y,zのデータリスト</param>
        </member>
        <member name="M:LabImg.BSplineCurve.CalFuncValue(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>
            関数値計算
            Pos2を求める
            </summary>
        </member>
        <member name="M:LabImg.BSplineCurve.SolveSE(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray@,ShoNS.Array.FloatArray@,ShoNS.Array.FloatArray@)">
            <summary>
            連立方程式をXYZについてそれぞれ解く
            </summary>
        </member>
        <member name="M:LabImg.BSplineCurve.MakeSE">
            <summary>
            連立方程式の係数行列作成
            </summary>
        </member>
        <member name="M:LabImg.BSplineCurve.SetData(LabImg.CurveData,LabImg.CurveData,System.Collections.Generic.List{LabImg.XYZ})">
            <summary>
            データ登録
            </summary>
            <param name="s">縦軸データ</param>
            <param name="t">横軸データ</param>
            <param name="xyzList">x,y,zのデータリスト</param>
        </member>
        <member name="T:LabImg.XYZ">
            <summary>
            3次元の点データを登録するクラス
            </summary>
        </member>
        <member name="M:LabImg.XYZ.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:LabImg.XYZ.X">
            <summary>
            X座標
            </summary>
        </member>
        <member name="P:LabImg.XYZ.Y">
            <summary>
            Y座標
            </summary>
        </member>
        <member name="P:LabImg.XYZ.Z">
            <summary>
            Z座標
            </summary>
        </member>
        <member name="T:LabImg.CurveData">
            <summary>
            曲線データを登録するクラス
            </summary>
        </member>
        <member name="F:LabImg.CurveData.Npx">
            <summary>
            分割点の個数
            </summary>
        </member>
        <member name="F:LabImg.CurveData.NodeArray">
            <summary>
            節点の配列
            </summary>
        </member>
        <member name="M:LabImg.CurveData.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            曲線のデータ定義
            </summary>
            <param name="pointNum">曲線上のデータ個数</param>
            <param name="splineDegree">スプラインの次数</param>
            <param name="divNum">分割区分数</param>
        </member>
        <member name="M:LabImg.CurveData.SetNodeSW">
            <summary>
            パラメトリックスプラインの場合の
            シェーンバーグ・ホイットニの条件を満たす節点の設定
            </summary>
        </member>
        <member name="M:LabImg.CurveData.CalBSpline(System.Single)">
            <summary>
            de Boor Coxの漸化式からBスプライン値の計算
            </summary>
        </member>
        <member name="P:LabImg.CurveData.PointNum">
            <summary>
            曲線上のデータ個数
            </summary>
        </member>
        <member name="P:LabImg.CurveData.SplineDegree">
            <summary>
            スプラインの次数
            </summary>
        </member>
        <member name="P:LabImg.CurveData.Rank">
            <summary>
            階数
            </summary>
        </member>
        <member name="P:LabImg.CurveData.DivNum">
            <summary>
            分割区分数
            </summary>
        </member>
        <member name="T:LabImg.HTUtility">
            <summary>
            晴佐久が必要だと思ったツールをまとめたライブラリ
            </summary>
        </member>
        <member name="M:LabImg.HTUtility.loadCSV(System.String)">
            <summary>
            ファイルパスからCSVファイルを読み取る
            </summary>
            <param name="path">ファイルパス</param>
            <returns>float配列に格納する</returns>
        </member>
        <member name="M:LabImg.HTUtility.HoughConversion(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            入力画像にHough変換をかけて出力画像に出力する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="threshold">閾値(defaultでは120)</param>
            <param name="thickness">線の太さ(defaultでは1)</param>
            <param name="rho">Hough変換につかうρの値(defaultでは1)</param>
            <param name="theta">Hough変換につかうΘの値(defaultではπ/180)</param>
        </member>
        <member name="M:LabImg.HTUtility.DisparityToDepthMap(OpenCvSharp.IplImage,System.Single,System.Single)">
            <summary>
            Disparity画像から距離画像へ変換する
            </summary>
            <param name="img">入力画像</param>
            <param name="convParam">convert Parameter(Q(4, 3))</param>
            <param name="focusLength">focus Length(Q(3, 4))</param>
            <returns></returns>
        </member>
        <member name="T:LabImg.kaneUtility">
            <summary>
            Kanemotoの作成したクラスライブラリー
            </summary>
        </member>
        <member name="M:LabImg.kaneUtility.getRectSE(OpenCvSharp.IplImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            矩形領域を抽出する。左上と右下座標を指定。IplImageは、Byte単位のRGBかGray
            </summary>
            <param name="img"></param>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="xe"></param>
            <param name="ye"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.getRect(OpenCvSharp.IplImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            矩形領域を抽出する。左上と右下座標を指定。IplImageは、Byte単位のRGBかGray
            </summary>
            <param name="img"></param>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.imageRotation90(OpenCvSharp.IplImage)">
            <summary>
            時計回りに９０度回転
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.imageRotation180(OpenCvSharp.IplImage)">
            <summary>
            時計回りに１８０度回転
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.imageRotation270(OpenCvSharp.IplImage)">
            <summary>
            時計回りに２７０度回転（反時計回りに９０度）
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.rotationMatrix(System.Single,System.Single,System.Single)">
            <summary>
            Eular回転行列う
            </summary>
            <param name="az">Z軸周りの回転(deg)</param>
            <param name="by">Y軸周りの回転(deg)</param>
            <param name="gz">新Z軸周りの回転(deg)</param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.imageGradient(OpenCvSharp.IplImage)">
            <summary>
            一回微分画像を作成（入力は、グレースケール。
            </summary>
            <param name="img"></param>
            <returns>戻り値は振幅と位相を２ｃｈのF32ビットのIplImageで戻す</returns>
        </member>
        <member name="M:LabImg.kaneUtility.floatImageRead(System.String,System.Single)">
            <summary>
            画像読み込みとグレースケール、γ補正変換
            </summary>
            <param name="imgPath"></param>
            <param name="gamma">２．２が標準</param>
            <returns>0-1のグレイスケールで読み込み</returns>
        </member>
        <member name="M:LabImg.kaneUtility.grayImageRead(System.String,System.Single)">
            <summary>
            画像読み込みとグレースケール、γ補正変換
            </summary>
            <param name="imgPath"></param>
            <param name="gamma">gamma=2.2が標準</param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.PyramidUp(OpenCvSharp.IplImage)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.PyramidDown(OpenCvSharp.IplImage)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.floatArrayMax(System.Single[0:,0:])">
            <summary>
            二次元floatアレイの最大値を返す
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.floatArrayMin(System.Single[0:,0:])">
            <summary>
            
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.matrixAbsSum(System.Single[0:,0:])">
            <summary>
            行列の絶対値の加算
            </summary>
            <param name="E"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.matrixDiff(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            行列の差を計算
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.maxIplImage(OpenCvSharp.IplImage)">
            <summary>
            IplImage.Val0　の最大値を求める
            </summary>
            <param name="I"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.minIplImage(OpenCvSharp.IplImage)">
            <summary>
            IplImage.Val0　の最小値を求める
            </summary>
            <param name="I"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.maxIplImageVal(OpenCvSharp.IplImage)">
            <summary>
            1チャンネルのIplImageの輝度値の最大値を返す
            </summary>
            <param name="I"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.minIplImageVal(OpenCvSharp.IplImage)">
            <summary>
            1チャンネルのIplImageの輝度値の最少値を返す
            </summary>
            <param name="I"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.maxCvMat(OpenCvSharp.CvMat)">
            <summary>
            二次元行列全体CvMatの最大値 
            </summary>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.minCvMat(OpenCvSharp.CvMat)">
            <summary>
            二次元行列全体CvMatの最小値 
            </summary>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.maxFloat2(System.Single,System.Single)">
            <summary>
            ２変数の大きい方を返す
            </summary>
            <param name="F1"></param>
            <param name="F2"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.minFloat2(System.Single,System.Single)">
            <summary>
            ２変数の小さい方を返す
            </summary>
            <param name="F1"></param>
            <param name="F2"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.CvMatFloatToIplImage(OpenCvSharp.CvMat)">
            <summary>
            Float型のCvMatを、F32のIplImageに変換する
            </summary>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.IplImageFloatToCvMat(OpenCvSharp.IplImage)">
            <summary>
             F32のIplImageを、Float型のCvMatに変換する
            </summary>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.IplImageToCvMat(OpenCvSharp.IplImage)">
            <summary>
             IplImage(Gray　または　RGB）を、Float型のCvMatに変換する。RGB型は、グレイスケールに自動変換する
            </summary>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.FloatArrayToIplImage(ShoNS.Array.FloatArray,System.Single,System.Single,System.Char)">
            <summary>
            FLoatArryをIplImageに変換する。
            </summary>
            <param name="D"></param>
            <param name="dmin"></param>
            <param name="dmax"></param>
            <param name="Gray">’G’でグレイスケール、それ以外はRGB</param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.IplImageToFloatArray(OpenCvSharp.IplImage)">
            <summary>
            IplImageをFloatArrayに変換する。
            </summary>
            <param name="src">ソースIplImage</param>
            <returns>FloatArray(Heught,Width)</returns>
        </member>
        <member name="M:LabImg.kaneUtility.IplImageToFloatArray(OpenCvSharp.IplImage,System.Char)">
            <summary>
            IplImageを、FloatArrayデータに変換数る
            </summary>
            <param name="src">ソース構造体</param>
            <param name="RGB">R,G,B,Oを、Byteデータで指定する</param>
            <returns></returns>
        </member>
        <member name="M:LabImg.kaneUtility.IplImageToDoubleArray(OpenCvSharp.IplImage)">
            <summary>
            IplImageをDoubleArrayに変換する。
            </summary>
            <param name="src">ソースIplImage</param>
            <returns>DoubleArray(Heught,Width)</returns>
        </member>
        <member name="M:LabImg.kaneUtility.SetDisparity(OpenCvSharp.CvMat,System.Single,System.Single,System.Windows.Forms.PictureBox,System.Windows.Forms.PictureBox,System.Windows.Forms.TextBox,System.Windows.Forms.TextBox)">
            <summary>
            二次元配列の濃淡表示
            </summary>
            <param name="Disp"></param>
            <param name="dmin"></param>
            <param name="dmax"></param>
            <param name="PicBox"></param>
            <param name="ColorBar"></param>
            <param name="tbmax"></param>
            <param name="tbmin"></param>
        </member>
        <member name="M:LabImg.kaneUtility.SetDisparity(OpenCvSharp.IplImage,System.Single,System.Single,System.Windows.Forms.PictureBox,System.Windows.Forms.PictureBox,System.Windows.Forms.TextBox,System.Windows.Forms.TextBox)">
            <summary>
            二次元配列の濃淡表示
            </summary>
            <param name="Disp">表示データ</param>
            <param name="dmin">表示スケール最小値</param>
            <param name="dmax">表示スケール最大値</param>
            <param name="PicBox">表示するピクチャーボックス</param>
            <param name="ColorBar">表示スケールのカラーバー</param>
            <param name="tbmax">最大値表示のテキストボックス</param>
            <param name="tbmin">最小値表示のテキストボックス</param>
        </member>
        <member name="M:LabImg.kaneUtility.SetDisparity(System.Single[0:,0:],System.Single,System.Single,System.Windows.Forms.PictureBox,System.Windows.Forms.PictureBox,System.Windows.Forms.TextBox,System.Windows.Forms.TextBox)">
            <summary>
            二次元配列の濃淡表示
            </summary>
            <param name="Disp"></param>
            <param name="dmin"></param>
            <param name="dmax"></param>
            <param name="PicBox"></param>
            <param name="ColorBar"></param>
            <param name="tbmax"></param>
            <param name="tbmin"></param>
        </member>
        <member name="M:LabImg.kaneUtility.SetDisparity(ShoNS.Array.DoubleArray,System.Double,System.Double,System.Windows.Forms.PictureBox,System.Windows.Forms.PictureBox,System.Windows.Forms.TextBox,System.Windows.Forms.TextBox)">
            <summary>
            
            </summary>
            <param name="Disp"></param>
            <param name="dmin"></param>
            <param name="dmax"></param>
            <param name="PicBox"></param>
            <param name="ColorBar"></param>
            <param name="tbmax"></param>
            <param name="tbmin"></param>
        </member>
        <member name="M:LabImg.kaneUtility.GetScaleColor(System.Single)">
            <summary>
            カラーコード変換
            </summary>
            <param name="zl">０～１の色レベル</param>
            <returns>色コード</returns>
        </member>
        <member name="T:LabImg.NormalRandom">
            <summary>
            正規乱数を発生させるクラス
            </summary>
        </member>
        <member name="M:LabImg.NormalRandom.#ctor(System.Double,System.Double)">
            <summary>
            コンストラクタ
            </summary>
            <param name="mean">平均</param>
            <param name="standardDeviation">標準偏差</param>
        </member>
        <member name="M:LabImg.NormalRandom.NextDouble">
            <summary>
            乱数を発生させる
            </summary>
            <returns></returns>
        </member>
        <member name="F:LabImg.ProgressForm.components">
            <summary>
            必要なデザイナ変数です
            </summary>
        </member>
        <member name="M:LabImg.ProgressForm.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:LabImg.ProgressForm.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:LabImg.ProgressDialog">
            <summary>
            進行状況ダイアログを表示するためのクラス
            </summary>
        </member>
        <member name="M:LabImg.ProgressDialog.Show(System.Windows.Forms.Form)">
            <summary>
            ダイアログを表示する
            </summary>
            <param name="owner">
            ownerの中央にダイアログが表示される
            </param>
            <remarks>
            このメソッドは一回しか呼び出せません。
            </remarks>
        </member>
        <member name="M:LabImg.ProgressDialog.Close">
            <summary>
            ダイアログを閉じる
            </summary>
        </member>
        <member name="P:LabImg.ProgressDialog.Title">
            <summary>
            ダイアログのタイトルバーに表示する文字列
            </summary>
        </member>
        <member name="P:LabImg.ProgressDialog.Minimum">
            <summary>
            プログレスバーの最小値
            </summary>
        </member>
        <member name="P:LabImg.ProgressDialog.Maximum">
            <summary>
            プログレスバーの最大値
            </summary>
        </member>
        <member name="P:LabImg.ProgressDialog.Value">
            <summary>
            プログレスバーの値
            </summary>
        </member>
        <member name="P:LabImg.ProgressDialog.Message">
            <summary>
            ダイアログに表示するメッセージ
            </summary>
        </member>
        <member name="P:LabImg.ProgressDialog.Canceled">
            <summary>
            キャンセルされたか
            </summary>
        </member>
        <member name="T:LabImg.PVector">
            <summary>
            3次元データのクラス
            </summary>
        </member>
        <member name="M:LabImg.PVector.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="z">Z座標</param>
        </member>
        <member name="M:LabImg.PVector.Cross(LabImg.PVector)">
            <summary>
            自身の3点と引数の3点の外積を返す
            </summary>
            <param name="src">公式のbの方</param>
            <returns>自身と引数の外積</returns>
        </member>
        <member name="M:LabImg.PVector.Dot(LabImg.PVector)">
            <summary>
            自身の3点と引数の内積を返す
            </summary>
            <param name="src">公式のbの方</param>
            <returns>内積</returns>
        </member>
        <member name="M:LabImg.PVector.Sub(LabImg.PVector)">
            <summary>
            自身のXYZ座標を引数のXYZそれぞれ減算した結果
            </summary>
            <param name="src">減算する3点</param>
            <returns>減算されたXYZ座標</returns>
        </member>
        <member name="M:LabImg.PVector.GetNormalization">
            <summary>
            正規化した値を返す
            </summary>
            <returns>正規化した値</returns>
        </member>
        <member name="M:LabImg.PVector.Equals(LabImg.PVector)">
            <summary>
            自身と引数が同じかどうか判定する
            </summary>
            <param name="src">比較する方のPVector</param>
            <returns>true or false</returns>
        </member>
        <member name="P:LabImg.PVector.X">
            <summary>
            X座標
            </summary>
        </member>
        <member name="P:LabImg.PVector.Y">
            <summary>
            Y座標
            </summary>
        </member>
        <member name="P:LabImg.PVector.Z">
            <summary>
            Z座標
            </summary>
        </member>
        <member name="T:LabImg.ShapeReconstruct">
            <summary>
            兼本先生がMatlabで作ったものの変換
            </summary>
        </member>
        <member name="M:LabImg.ShapeReconstruct.ShapeReconstruction(OpenCvSharp.CvMat,System.Single,System.Single,System.Int32,OpenCvSharp.CvMat@,OpenCvSharp.CvMat@,OpenCvSharp.CvMat@,System.Collections.Generic.List{OpenCvSharp.CvMat}@)">
            <summary>
            <para>対応点からZ座標を求める</para>
            <para>画像枚数M 特徴点数N XYZデータ数をPとする</para>
            </summary>
            <param name="mxyMat">対応点のデータ format[M, N] = 2ch(X,Y)</param>
            <param name="f">焦点距離</param>
            <param name="ZC">対象の重心の奥行き</param>
            <param name="opt">0 = 平行投影(未完成) 1 = 弱透視投影</param>
            <param name="Tk">出力用 Tk</param>
            <param name="XYZ">出力用 一枚目の画像のXYZ format[P,N] = 1ch </param>
            <param name="XYZM">出力用 XYZのミラー</param>
            <param name="Rlist">M枚の画像の回転ベクトル format[3,3] = 1ch</param>
        </member>
        <member name="M:LabImg.ShapeReconstruct.FundamentalMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat@,OpenCvSharp.CvMat@)">
            <summary>
            F行列を求める(要検証)
            </summary>
            <param name="T1">移動行列1</param>
            <param name="R1">回転行列1</param>
            <param name="T2">移動行列2</param>
            <param name="R2">回転行列2</param>
            <param name="A">カメラ行列</param>
            <param name="F">出力用F行列</param>
            <param name="s">出力用F行列の特異値分解のS</param>
        </member>
        <member name="M:LabImg.ShapeReconstruct.Kron(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Kronecker テンソル積
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.ShapeReconstruct.ShapeReconstruction(System.Collections.Generic.List{System.Collections.Generic.List{ShoNS.Array.FloatArray}},System.Single,System.Single,System.Int32,System.Int32,System.Int32,ShoNS.Array.FloatArray@,ShoNS.Array.FloatArray@,System.Collections.Generic.List{ShoNS.Array.FloatArray}@,ShoNS.Array.FloatArray@)">
            <summary>
            距離を求める
            </summary>
            <param name="mxyList">xyデータがN個あるリストがM個あるリスト</param>
            <param name="f">焦点距離</param>
            <param name="ZC">対象の重心の奥行き</param>
            <param name="opt">0 = 平行投影(未完成) 1 = 弱透視投影</param>
            <param name="M">画像の枚数</param>
            <param name="N">画像1枚ごとのXYのデータ数</param>
            <param name="XYZ">出力用XYZ</param>
            <param name="XYZM">出力用XYZM</param>
            <param name="Rlist">出力用M個のR座標リスト</param>
            <param name="Tk">出力用Tk</param>
        </member>
        <member name="M:LabImg.ShapeReconstruct.SaveCSV(ShoNS.Array.FloatArray)">
            <summary>
            配列をCSV形式でデスクトップに保存
            デバック用
            </summary>
            <param name="saveArray">保存したい配列</param>
        </member>
        <member name="M:LabImg.ShapeReconstruct.ChangeCol(ShoNS.Array.FloatArray,ShoNS.Array.IntArray)">
            <summary>
            列の入れ替え
            </summary>
            <param name="src">入れ替える配列</param>
            <param name="sortArray">入れ替える順番が入った配列</param>
            <returns>入れ替え終わった配列</returns>
        </member>
        <member name="M:LabImg.ShapeReconstruct.Kron(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray)">
            <summary>
            Kronecker テンソル積
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.ShapeReconstruct.FundamentalMatrix(ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,ShoNS.Array.FloatArray,ShoNS.Array.FloatArray@,ShoNS.Array.FloatArray@)">
            <summary>
            F行列を求める
            </summary>
            <param name="T1">移動行列1</param>
            <param name="R1">回転行列1</param>
            <param name="T2">移動行列2</param>
            <param name="R2">回転行列2</param>
            <param name="A">カメラ行列</param>
            <param name="F">出力用F行列</param>
            <param name="s">出力用F行列の特異値分解のS</param>
        </member>
        <member name="T:LabImg.Smoothing3D">
            <summary>
            3Dデータの平滑化クラス
            </summary>
        </member>
        <member name="M:LabImg.Smoothing3D.Laplacian(System.Collections.Generic.List{LabImg.Triangle},System.Single)">
            <summary>
            <para>ラプラシアンスムージング</para>
            <para>裏返った場合の処理は未実装 誰かやってください</para>
            </summary>
            <param name="srcTriangleList">3dを構築する三角形リスト</param>
            <param name="dt">更新量の補正値  (x,y,z)更新値= 更新量 * dt + 現在値 </param>
            <returns>スムージング後の三角形リスト</returns>
        </member>
        <member name="T:LabImg.Tetrahedron">
            <summary>
            三角錐のデータクラス
            </summary>
        </member>
        <member name="M:LabImg.Tetrahedron.#ctor(LabImg.PVector,LabImg.PVector,LabImg.PVector,LabImg.PVector)">
            <summary>
            コンストラクタ
            </summary>
            <param name="p1">座標 1</param>
            <param name="p2">座標 2</param>
            <param name="p3">座標 3</param>
            <param name="p4">座標 4</param>
        </member>
        <member name="M:LabImg.Tetrahedron.getCenterCircumcircle">
            <summary>
            三角錐の四点から外接円の半径と中心を求める
            参考URL　http://www.openprocessing.org/sketch/31295
            </summary>
        </member>
        <member name="M:LabImg.Tetrahedron.gauss(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
            ガウス消去法
            </summary>
            <param name="a">分解する方の配列</param>
            <param name="b">解</param>
            <param name="x">連立方程式のX部分</param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Tetrahedron.lu(System.Double[0:,0:],System.Int32[])">
            <summary>
            対角上の要素を判定する
            </summary>
            <param name="a"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:LabImg.Tetrahedron.solve(System.Double[0:,0:],System.Double[],System.Int32[],System.Double[])">
            <summary>
            LU分解の解を解く
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="ip"></param>
            <param name="x"></param>
        </member>
        <member name="P:LabImg.Tetrahedron.P1">
            <summary>
            座標 1
            </summary>
        </member>
        <member name="P:LabImg.Tetrahedron.P2">
            <summary>
            座標 2
            </summary>
        </member>
        <member name="P:LabImg.Tetrahedron.P3">
            <summary>
            座標 3
            </summary>
        </member>
        <member name="P:LabImg.Tetrahedron.P4">
            <summary>
            座標 4
            </summary>
        </member>
        <member name="P:LabImg.Tetrahedron.Vertices">
            <summary>
            4点を含んだ配列
            </summary>
        </member>
        <member name="P:LabImg.Tetrahedron.O">
            <summary>
            外接円の中心
            </summary>
        </member>
        <member name="P:LabImg.Tetrahedron.R">
            <summary>
            外接円の半径
            </summary>
        </member>
        <member name="T:LabImg.Triangle">
            <summary>
            三角形のデータクラス
            </summary>
        </member>
        <member name="M:LabImg.Triangle.#ctor(LabImg.PVector,LabImg.PVector,LabImg.PVector)">
            <summary>
            コンストラクタ
            </summary>
            <param name="v1">三角形の座標 1</param>
            <param name="v2">三角形の座標 2</param>
            <param name="v3">三角形の座標 3</param>
        </member>
        <member name="M:LabImg.Triangle.GetNormal">
            <summary>
            法線を求める
            頂点は左回りの順であるとする
            </summary>
            <returns>法線ベクトル</returns>
        </member>
        <member name="M:LabImg.Triangle.TurnBack">
            <summary>
            面を裏返す（頂点の順序を逆に）
            </summary>
        </member>
        <member name="M:LabImg.Triangle.Equals(LabImg.Triangle)">
            <summary>
            自身と引数の比較
            </summary>
            <param name="src">比べたい三角形</param>
            <returns>true or false</returns>
        </member>
        <member name="M:LabImg.Triangle.GetArea">
            <summary>
            自身の面積を求める
            </summary>
            <returns>面積</returns>
        </member>
        <member name="P:LabImg.Triangle.V1">
            <summary>
            三角形の座標 1
            </summary>
        </member>
        <member name="P:LabImg.Triangle.V2">
            <summary>
            三角形の座標 2
            </summary>
        </member>
        <member name="P:LabImg.Triangle.V3">
            <summary>
            三角形の座標 3
            </summary>
        </member>
        <member name="P:LabImg.Triangle.Vertics">
            <summary>
            <para>三角形の座標データが入った配列</para>
            <para>データ数は三つ</para>
            </summary>
        </member>
    </members>
</doc>
